<?php
// $Id: blockcache_stale.module,v 1.1.2.6 2010/08/05 08:03:29 yhahn Exp $

/**
 * Implements hook_init().
 * Load all dependencies from composer (at least Guzzle)
 */
function blockcache_stale_init() {
  require __DIR__ . '/vendor/autoload.php';
}



/**
 * Implements hook_context_plugins().
 * This is a ctools plugins hook.
 *
 * It declares that the site should use this class of context reaction block
 * The only means of this class (in compareason of context_blockcache_alter_reaction_block's one
 * is to call blockcache_stale_block_render_blocks instead of default drupal core block module.
 */
function blockcache_stale_context_plugins() {
  return array(
    'blockcache_stale_reaction_block' => array(
      'handler' => array(
        'path' => drupal_get_path('module', 'blockcache_stale') . '/plugins',
        'file' => 'blockcache_stale_reaction_block.inc',
        'class' => 'blockcache_stale_reaction_block',
        'parent' => 'context_blockcache_alter_reaction_block',
      ),
    ),
  );
}

/**
 * Implements hook_context_registry_alter().
 */
function blockcache_stale_context_registry_alter(&$registry) {
  if (isset($registry['reactions']['block'])) {
    $registry['reactions']['block']['plugin'] = 'blockcache_stale_reaction_block';
  }
}

function blockcache_stale_clear_block($bid, $page) {
  $params = array(
    'block' => $bid,
    'page' => $page
  );
  blockcache_stale_zmq_ping('clear-block', $params);
}

function blockcache_stale_clear_page($pages) {
  $params = array(
    'pages' => $pages
  );
  blockcache_stale_zmq_ping('clear-pages', $params);
}

function blockcache_stale_zmq_ping($action, $params) {
  $actions = func_get_args();
  $msg = $actions[0];
  $actions[0] = 'from:drupal/msg:' . $msg;
  $actions[1] = '' . serialize($params);

  $ctx = new ZMQContext();
  $socket = new ZMQSocket($ctx, ZMQ::SOCKET_PUSH);
  $socket->bind('tcp://*:1234');
  $socket->sendMulti($actions);

  watchdog('blockcache_stale', 'ping clear block: %msg', array('%msg' => $msg), WATCHDOG_NOTICE, $link = NULL);

  echo $action;
}



function blockcache_stale_regenerate_block($params = array()) {
  global $base_url;
  $params['base_url'] = $base_url;

  $client = new Guzzle\Http\Client('{{base_url}}/{{page}}?blockcache_stale_block={{block}}', $params);
  $response = $client->head()->send();
  print $response->getStatusCode() . ' ' . $response->getReasonPhrase() . "\n";
}

function blockcache_stale_regenerate_page($params = array()) {
  global $base_url;
  $params['base_url'] = str_replace('http://', '', $base_url);

  foreach ($params['pages'] as $page) {
    $params['page'] = $page;
    $client = new Guzzle\Http\Client('http://{{base_url}}/{{page}}?blockcache_stale_page=node', $params);
    $response = $client->head()->send();
    print $response->getStatusCode() . ' ' . $response->getReasonPhrase() . "\n";
  }
}

/**
 * Render the content and subject for a set of blocks.
 * **OVERRIDE** by bjaillot for:
 * - never reset cache, but instead regenerate it
 * - set cache to be CACHE_PERMANENT instead of CACHE_TEMPORARY
 *
 * @param $region_blocks
 *   An array of block objects such as returned for one region by _block_load_blocks().
 *
 * @return
 *   An array of visible blocks as expected by drupal_render().
 */
function blockcache_stale_block_render_blocks($region_blocks) {
  if ($_SERVER['REQUEST_METHOD'] != 'HEAD' && !(isset($_GET['blockcache_stale_block']) || isset($_GET['blockcache_stale_page']))) { //TODO check this condition
    // use default render block if not in condition of blockcache_stale
    return blockcache_stale_original_block_render_blocks($region_blocks);
  }


  // Block caching is not compatible with node access modules. We also
  // preserve the submission of forms in blocks, by fetching from cache only
  // if the request method is 'GET' (or 'HEAD').
  $cacheable = !count(module_implements('node_grants')) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD');
  foreach ($region_blocks as $key => $block) {
    // Render the block content if it has not been created already.
    if (!isset($block->content) && $block->cache >=1 && (!isset($_GET['blockcache_stale_block']) || (isset($_GET['blockcache_stale_block']))&& $key == $_GET['blockcache_stale_block'])) {
      // Erase the block from the static array - we'll put it back if it has
      // content.
      unset($region_blocks[$key]);
      // Try fetching the block from cache.
      if ($cacheable && ($cid = blockcache_stale_block_get_cache_id($block))) {
        $array = module_invoke($block->module, 'block_view', $block->delta);

        // Allow modules to modify the block before it is viewed, via either
        // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
        drupal_alter(array('block_view', "block_view_{$block->module}_{$block->delta}"), $array, $block);

        if (isset($cid)) {
          cache_set($cid, $array, 'cache_block', CACHE_PERMANENT);
        }
      }
    }
  }
  return $region_blocks;
}


/**
 * Render the content and subject for a set of blocks.
 * **OVERRIDE** by bjaillot for:
 * - use custom _block_get_cache_id
 * - set cache to be CACHE_PERMANENT instead of CACHE_TEMPORARY
 *
 * @param $region_blocks
 *   An array of block objects such as returned for one region by _block_load_blocks().
 *
 * @return
 *   An array of visible blocks as expected by drupal_render().
 */
function blockcache_stale_original_block_render_blocks($region_blocks) {
  // Block caching is not compatible with node access modules. We also
  // preserve the submission of forms in blocks, by fetching from cache only
  // if the request method is 'GET' (or 'HEAD').
  $cacheable = !count(module_implements('node_grants')) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD');
  foreach ($region_blocks as $key => $block) {
    // Render the block content if it has not been created already.
    if (!isset($block->content)) {
      // Erase the block from the static array - we'll put it back if it has
      // content.
      unset($region_blocks[$key]);
      // Try fetching the block from cache.
      // if ($cacheable && ($cid = _block_get_cache_id($block)) && ($cache = cache_get($cid, 'cache_block'))) { // CHANGED
      if ($cacheable && ($cid = blockcache_stale_block_get_cache_id($block)) && ($cache = cache_get($cid, 'cache_block'))) {
        $array = $cache->data;
      }
      else {
        $array = module_invoke($block->module, 'block_view', $block->delta);

        // Allow modules to modify the block before it is viewed, via either
        // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
        drupal_alter(array('block_view', "block_view_{$block->module}_{$block->delta}"), $array, $block);

        if (isset($cid)) {
          // cache_set($cid, $array, 'cache_block', CACHE_TEMPORARY); // CHANGED
          cache_set($cid, $array, 'cache_block', CACHE_PERMANENT);
        }
      }

      if (isset($array) && is_array($array)) {
        foreach ($array as $k => $v) {
          $block->$k = $v;
        }
      }
      if (isset($block->content) && $block->content) {
        // Normalize to the drupal_render() structure.
        if (is_string($block->content)) {
          $block->content = array('#markup' => $block->content);
        }
        // Override default block title if a custom display title is present.
        if ($block->title) {
          // Check plain here to allow module generated titles to keep any
          // markup.
          $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);
        }
        if (!isset($block->subject)) {
          $block->subject = '';
        }
        $region_blocks["{$block->module}_{$block->delta}"] = $block;
      }
    }
  }
  return $region_blocks;
}



/**
 * Assemble the cache_id to use for a given block.
 *
 * The cache_id string reflects the viewing context for the current block
 * instance, obtained by concatenating the relevant context information
 * (user, page, ...) according to the block's cache settings (BLOCK_CACHE_*
 * constants). Two block instances can use the same cached content when
 * they share the same cache_id.
 *
 * Theme and language contexts are automatically differentiated.
 *
 * @param $block
 * @return
 *   The string used as cache_id for the block.
 */
function blockcache_stale_block_get_cache_id($block) {
  global $user;

  // User 1 being out of the regular 'roles define permissions' schema,
  // it brings too many chances of having unwanted output get in the cache
  // and later be served to other users. We therefore exclude user 1 from
  // block caching.
  if (variable_get('block_cache', FALSE) && !in_array($block->cache, array(DRUPAL_NO_CACHE, DRUPAL_CACHE_CUSTOM)) && $user->uid != 1) {
    // Start with common sub-patterns: block identification, theme, language.
    $cid_parts[] = $block->module;
    $cid_parts[] = $block->delta;

    $drupal_cid_parts = drupal_render_cid_parts($block->cache);
    $drupal_cid_parts = preg_replace('/[\?\&]{1}blockcache_stale_(?:block|page)=(?:.*)/', '', $drupal_cid_parts);
    $cid_parts = array_merge($cid_parts, $drupal_cid_parts);

    return implode(':', $cid_parts);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Change node_form_submit callback just to override
 * the block and page cache clearing after each node
 * form submit
 *
 * @see http://drupalcode.org/project/performance_hacks.git/blob/HEAD:/performance_hacks.module
 */
function blockcache_stale_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $node_form_submit = array_search('node_form_submit', $form['actions']['submit']['#submit']);
    if ($node_form_submit !== FALSE) {
      $form['actions']['submit']['#submit'][$node_form_submit] = 'blockcache_stale_node_form_submit';
    }
  }
}

/**
 * Exact copy of node_form_submit, except for cache clearing.
 * Do not clear block and page cache because we are overriding
 * by daemon script.
 * This way, cache are never deleted, but they are overriden
 * by the daemon script so cache is always existing and perfectly
 * up to date.
 *
 * The only change with the original node_form_submit is the last
 * line commented
 *
 * @see http://drupalcode.org/project/performance_hacks.git/blob/HEAD:/performance_hacks.module
 */
function blockcache_stale_node_form_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = 'node/' . $node->nid;
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Only change from Drupal core - try to keep this updated.
  // Clear the page and block caches.
  //cache_clear_all();
}
